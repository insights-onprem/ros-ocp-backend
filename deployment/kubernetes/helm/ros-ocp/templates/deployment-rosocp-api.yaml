apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ros-ocp.fullname" . }}-rosocp-api
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
    app.kubernetes.io/name: rosocp-api
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ros-ocp.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
      app.kubernetes.io/name: rosocp-api
  template:
    metadata:
      labels:
        {{- include "ros-ocp.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
        app.kubernetes.io/name: rosocp-api
    spec:
      serviceAccountName: {{ include "ros-ocp.serviceAccountName" . }}
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-db-ros
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              until nc -z {{ include "ros-ocp.fullname" . }}-db-ros {{ .Values.database.ros.port }}; do
                echo "Waiting for ROS database..."
                sleep 5
              done
              echo "ROS database is ready"
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              until nc -z {{ include "ros-ocp.fullname" . }}-kafka {{ .Values.kafka.broker.port }}; do
                echo "Waiting for Kafka..."
                sleep 5
              done
              echo "Kafka is ready"
      containers:
        - name: rosocp-api
          image: "{{ .Values.rosocp.api.image.repository }}:{{ .Values.rosocp.api.image.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - |
              ./rosocp db migrate up
              ./rosocp start api
          ports:
            - name: http
              containerPort: {{ .Values.rosocp.api.port }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.rosocp.api.metricsPort }}
              protocol: TCP
          env:
            - name: PATH_PREFIX
              value: {{ .Values.rosocp.api.env.PATH_PREFIX | quote }}
            - name: CLOWDER_ENABLED
              value: "false"
            - name: RBAC_ENABLE
              value: {{ .Values.rosocp.api.env.RBAC_ENABLE | quote }}
            - name: DB_POOL_SIZE
              value: {{ .Values.rosocp.api.env.DB_POOL_SIZE | quote }}
            - name: DB_MAX_OVERFLOW
              value: {{ .Values.rosocp.api.env.DB_MAX_OVERFLOW | quote }}
            - name: SERVICE_NAME
              value: {{ .Values.rosocp.api.env.SERVICE_NAME | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.rosocp.api.env.LOG_LEVEL | quote }}
            - name: DB_HOST
              value: {{ include "ros-ocp.databaseHost" . }}
            - name: DB_PORT
              value: {{ .Values.database.ros.port | quote }}
            - name: DB_NAME
              value: {{ .Values.database.ros.name | quote }}
            - name: DB_USER
              value: {{ .Values.database.ros.username | quote }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ros-ocp.fullname" . }}-db-credentials
                  key: ros-password
            - name: DATABASE_URL
              value: {{ include "ros-ocp.databaseUrl" . }}
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: {{ include "ros-ocp.fullname" . }}-kafka:{{ .Values.kafka.broker.port }}
          livenessProbe:
            httpGet:
              path: /status
              port: {{ .Values.rosocp.api.port }}
            initialDelaySeconds: {{ .Values.probes.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /status
              port: {{ .Values.rosocp.api.port }}
            initialDelaySeconds: 15
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          resources:
            {{- toYaml .Values.resources.application | nindent 12 }}