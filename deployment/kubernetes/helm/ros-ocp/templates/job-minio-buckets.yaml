apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ros-ocp.fullname" . }}-minio-buckets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: setup
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "ros-ocp.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: setup
    spec:
      restartPolicy: OnFailure
      securityContext:
        {{- if eq (include "ros-ocp.isOpenShift" .) "false" }}
        runAsNonRoot: false
        {{- else }}
        runAsNonRoot: true
        {{- end }}
        {{- if eq (include "ros-ocp.isOpenShift" .) "false" }}
        runAsUser: 1001
        {{- end }}
        {{- if semverCompare ">=1.19-0" .Capabilities.KubeVersion.GitVersion }}
        seccompProfile:
          type: RuntimeDefault
        {{- end }}
      initContainers:
        - name: wait-for-minio
          image: "{{ .Values.global.initContainers.waitFor.repository }}:{{ .Values.global.initContainers.waitFor.tag }}"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            {{- if eq (include "ros-ocp.isOpenShift" .) "false" }}
            runAsNonRoot: false
            {{- end }}
            {{- if semverCompare ">=1.19-0" .Capabilities.KubeVersion.GitVersion }}
            seccompProfile:
              type: RuntimeDefault
            {{- end }}
          command: ['bash', '-c']
          args:
            - |
              echo "Waiting for MinIO at {{ include "ros-ocp.fullname" . }}-minio:{{ .Values.minio.ports.api }}..."
              until timeout 3 bash -c "echo > /dev/tcp/{{ include "ros-ocp.fullname" . }}-minio/{{ .Values.minio.ports.api }}" 2>/dev/null; do
                echo "MinIO not ready yet, retrying in 5 seconds..."
                sleep 5
              done
              echo "MinIO is ready"
      containers:
        - name: minio-buckets
          image: "{{ .Values.global.initContainers.minioMc.repository }}:{{ .Values.global.initContainers.minioMc.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            {{- if eq (include "ros-ocp.isOpenShift" .) "false" }}
            runAsUser: 1001
            {{- end }}
            {{- if semverCompare ">=1.19-0" .Capabilities.KubeVersion.GitVersion }}
            seccompProfile:
              type: RuntimeDefault
            {{- end }}
          volumeMounts:
            - name: mc-config
              mountPath: /.mc
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "ros-ocp.fullname" . }}-minio-credentials
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "ros-ocp.fullname" . }}-minio-credentials
                  key: secret-key
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo 'Waiting for MinIO to be ready...'
              for i in {1..10}; do
                if /usr/bin/mc alias set myminio http://{{ include "ros-ocp.fullname" . }}-minio:{{ .Values.minio.ports.api }} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} >/dev/null 2>&1; then
                  echo 'MinIO is ready!'
                  break
                else
                  echo "MinIO not ready, waiting... (attempt $i/10)"
                  sleep 3
                fi
              done
              /usr/bin/mc alias set myminio http://{{ include "ros-ocp.fullname" . }}-minio:{{ .Values.minio.ports.api }} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} || exit 1
              {{- range .Values.minio.buckets }}
              /usr/bin/mc mb --ignore-existing myminio/{{ . }}
              /usr/bin/mc anonymous set public myminio/{{ . }}
              {{- end }}
              echo 'MinIO bucket setup completed successfully'
      volumes:
        - name: mc-config
          emptyDir: {}