apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ros-ocp.fullname" . }}-sources-api
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
    app.kubernetes.io/name: sources-api
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ros-ocp.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
      app.kubernetes.io/name: sources-api
  template:
    metadata:
      labels:
        {{- include "ros-ocp.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
        app.kubernetes.io/name: sources-api
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-db-sources
          image: "{{ .Values.global.initContainers.waitFor.repository }}:{{ .Values.global.initContainers.waitFor.tag }}"
          command: ['bash', '-c']
          args:
            - |
              echo "Waiting for Sources database at {{ include "ros-ocp.sourcesDatabaseHost" . }}:{{ .Values.database.sources.port }}..."
              until timeout 3 bash -c "echo > /dev/tcp/{{ include "ros-ocp.sourcesDatabaseHost" . }}/{{ .Values.database.sources.port }}" 2>/dev/null; do
                echo "Database not ready yet, retrying in 5 seconds..."
                sleep 5
              done
              echo "Sources database is ready"
              echo "Sources database is ready"
        - name: wait-for-kafka
          image: "{{ .Values.global.initContainers.waitFor.repository }}:{{ .Values.global.initContainers.waitFor.tag }}"
          command: ['bash', '-c']
          args:
            - |
              echo "Waiting for Kafka at {{ include "ros-ocp.fullname" . }}-kafka:{{ .Values.kafka.broker.port }}..."
              until timeout 3 bash -c "echo > /dev/tcp/{{ include "ros-ocp.fullname" . }}-kafka/{{ .Values.kafka.broker.port }}" 2>/dev/null; do
                echo "Kafka not ready yet, retrying in 5 seconds..."
                sleep 5
              done
              echo "Kafka is ready"
              echo "Kafka is ready"
        - name: wait-for-redis
          image: "{{ .Values.global.initContainers.waitFor.repository }}:{{ .Values.global.initContainers.waitFor.tag }}"
          command: ['bash', '-c']
          args:
            - |
              echo "Waiting for Redis at {{ include "ros-ocp.fullname" . }}-redis:{{ .Values.redis.port }}..."
              until timeout 3 bash -c "echo > /dev/tcp/{{ include "ros-ocp.fullname" . }}-redis/{{ .Values.redis.port }}" 2>/dev/null; do
                echo "Redis not ready yet, retrying in 5 seconds..."
                sleep 5
              done
              echo "Redis is ready"
              echo "Redis is ready"
      containers:
        - name: sources-api
          image: "{{ .Values.sourcesApi.image.repository }}:{{ .Values.sourcesApi.image.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.sourcesApi.port }}
              protocol: TCP
          env:
            - name: DATABASE_USER
              value: {{ .Values.database.sources.username | quote }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ros-ocp.fullname" . }}-db-credentials
                  key: sources-password
            - name: DATABASE_HOST
              value: {{ include "ros-ocp.sourcesDatabaseHost" . }}
            - name: DATABASE_PORT
              value: {{ .Values.database.sources.port | quote }}
            - name: DATABASE_NAME
              value: {{ .Values.database.sources.name | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.sourcesApi.logLevel | quote }}
            - name: REDIS_CACHE_HOST
              value: {{ include "ros-ocp.fullname" . }}-redis
            - name: REDIS_CACHE_PORT
              value: {{ .Values.redis.port | quote }}
            - name: BYPASS_RBAC
              value: {{ .Values.sourcesApi.bypassRbac | quote }}
            - name: QUEUE_HOST
              value: {{ include "ros-ocp.fullname" . }}-kafka
            - name: QUEUE_PORT
              value: {{ .Values.kafka.broker.port | quote }}
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "ros-ocp.fullname" . }}-sources-credentials
                  key: encryption-key
            - name: SOURCES_ENV
              value: {{ .Values.sourcesApi.sourcesEnv | quote }}
          livenessProbe:
            httpGet:
              path: /api/sources/v1.0/source_types
              port: {{ .Values.sourcesApi.port }}
            initialDelaySeconds: {{ .Values.probes.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /api/sources/v1.0/source_types
              port: {{ .Values.sourcesApi.port }}
            initialDelaySeconds: 15
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          resources:
            {{- toYaml .Values.resources.application | nindent 12 }}