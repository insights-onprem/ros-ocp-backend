apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ros-ocp.fullname" . }}-kafka
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: kafka
    app.kubernetes.io/name: kafka
spec:
  serviceName: {{ include "ros-ocp.fullname" . }}-kafka
  replicas: 1
  selector:
    matchLabels:
      {{- include "ros-ocp.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: kafka
      app.kubernetes.io/name: kafka
  template:
    metadata:
      labels:
        {{- include "ros-ocp.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: kafka
        app.kubernetes.io/name: kafka
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: kafka
          image: "{{ .Values.kafka.broker.image.repository }}:{{ .Values.kafka.broker.image.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          ports:
            - name: kafka
              containerPort: {{ .Values.kafka.broker.port }}
              protocol: TCP
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://{{ include "ros-ocp.fullname" . }}-kafka:{{ .Values.kafka.broker.port }}
            - name: KAFKA_BROKER_ID
              value: {{ .Values.kafka.broker.env.KAFKA_BROKER_ID | quote }}
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: {{ .Values.kafka.broker.env.KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR | quote }}
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: {{ include "ros-ocp.fullname" . }}-zookeeper:32181
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: {{ .Values.kafka.broker.env.KAFKA_AUTO_CREATE_TOPICS_ENABLE | quote }}
            - name: KAFKA_LISTENERS
              value: PLAINTEXT://0.0.0.0:{{ .Values.kafka.broker.port }}
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: PLAINTEXT:PLAINTEXT
            - name: KAFKA_LOG_DIRS
              value: /var/lib/kafka/data
          volumeMounts:
            - name: kafka-storage
              mountPath: /var/lib/kafka/data
          livenessProbe:
            tcpSocket:
              port: {{ .Values.kafka.broker.port }}
            initialDelaySeconds: 60
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.kafka.broker.port }}
            initialDelaySeconds: 30
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          resources:
            {{- toYaml .Values.resources.kafka | nindent 12 }}
  volumeClaimTemplates:
    - metadata:
        name: kafka-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.global.storageClass }}
        resources:
          requests:
            storage: {{ .Values.kafka.broker.storage.size }}