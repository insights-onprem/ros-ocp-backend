apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ros-ocp.fullname" . }}-db-ros
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
    app.kubernetes.io/name: db-ros
spec:
  serviceName: {{ include "ros-ocp.fullname" . }}-db-ros
  replicas: 1
  selector:
    matchLabels:
      {{- include "ros-ocp.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
      app.kubernetes.io/name: db-ros
  template:
    metadata:
      labels:
        {{- include "ros-ocp.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
        app.kubernetes.io/name: db-ros
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: postgres
          image: "{{ .Values.database.ros.image.repository }}:{{ .Values.database.ros.image.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          ports:
            - name: postgres
              containerPort: {{ .Values.database.ros.port }}
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: {{ .Values.database.ros.name | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.database.ros.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ros-ocp.fullname" . }}-db-credentials
                  key: ros-password
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - {{ .Values.database.ros.username }}
            initialDelaySeconds: {{ .Values.probes.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - {{ .Values.database.ros.username }}
            initialDelaySeconds: 5
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          resources:
            {{- toYaml .Values.resources.database | nindent 12 }}
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.global.storageClass }}
        resources:
          requests:
            storage: {{ .Values.database.ros.storage.size }}